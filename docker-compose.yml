version: '3.8'

services:
  # PostgreSQL Database for Authentication
  postgres:
    image: postgres:15-alpine
    container_name: cse-explorer-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=cse_user
      - POSTGRES_PASSWORD=cse_password
      - POSTGRES_DB=cse_explorer_auth
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cse-explorer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cse_user -d cse_explorer_auth"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Graph Database Service
  graph-db:
    build:
      context: .
      dockerfile: Graph_Database_Service/Dockerfile
    container_name: cse-explorer-graph-db
    ports:
      - "7474:7474"  # Neo4j HTTP (browser access)
      - "7687:7687"  # Neo4j Bolt (database connections)
      - "2004:2004"  # Prometheus metrics (optional for monitoring)
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
      - NEO4J_server_default_listen_address=0.0.0.0
      - NEO4J_server_bolt_listen_address=0.0.0.0:7687
      - NEO4J_server_http_listen_address=0.0.0.0:7474
      - NEO4J_server_config_strict_validation_enabled=false
      # Monitoring configuration (optional - can be enabled for performance monitoring)
      - NEO4J_server_metrics_enabled=true
      - NEO4J_server_metrics_prometheus_enabled=true
      - NEO4J_server_metrics_prometheus_endpoint=0.0.0.0:2004
      - NEO4J_dbms_logs_query_enabled=INFO
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./ETL_Pipeline_V2/Load/cypher_script/cypher:/cypher_queries:ro
    networks:
      - cse-explorer-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "-a", "bolt://localhost:7687", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5



  # Redis Cache and Message Store (with Pub/Sub optimizations)
  redis:
    image: redis:7-alpine
    container_name: cse-explorer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --notify-keyspace-events Ex
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    networks:
      - cse-explorer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper - Kafka coordination service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: cse-explorer-zookeeper
    ports:
      - "32181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - cse-explorer-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: cse-explorer-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1GB
      KAFKA_COMPRESSION_TYPE: "gzip"
    volumes:
      - kafka_data:/var/lib/kafka/data
    command: >
      bash -c "
        /etc/confluent/docker/run &
        echo 'Waiting for Kafka to start...'
        sleep 30
        kafka-topics --create --topic chat.requests --bootstrap-server localhost:29092 --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --create --topic chat.responses --bootstrap-server localhost:29092 --partitions 3 --replication-factor 1 --if-not-exists
        kafka-topics --create --topic visualization.requests --bootstrap-server localhost:29092 --partitions 3 --replication-factor 1 --if-not-exists
        echo 'Kafka topics created successfully'
        wait
      "
    networks:
      - cse-explorer-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Topic Initialization - Removed due to command parsing issues
  # Use the create-kafka-topics.sh script instead for topic creation

  # Kafka UI for monitoring (optional but helpful for learning)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: cse-explorer-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - cse-explorer-network

  # Natural Language Agent Service with integrated Kafka consumer
  nl-agent:
    build:
      context: ./Natural Language Agent
      dockerfile: Dockerfile.dev
    container_name: cse-explorer-nl-agent
    ports:
      - "8001:8001"
    volumes:
      # Mount source code for hot-reload
      - "./Natural Language Agent:/app:cached"
      # Mount utils folder
      - "./utils:/utils:cached"
      # Exclude Python cache and venv
      - /app/__pycache__
      - /app/venv
      - /app/.pytest_cache
    depends_on:
      graph-db:
        condition: service_healthy
      # - rag-service
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://graph-db:7687  # Connect to Neo4j in Docker network
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - NEO4J_DATABASE=neo4j
      - RAG_SERVICE_URL=http://rag-service:8002
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/utils:$PYTHONPATH
    command: ["python", "-m", "uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]
    networks:
      - cse-explorer-network



  # API Gateway Service
  api-gateway:
    build:
      context: ./API Gateway
      dockerfile: Dockerfile.dev
    container_name: cse-explorer-api-gateway
    ports:
      - "8080:8080"
    volumes:
      # Mount source code for hot-reload
      - "./API Gateway:/app:cached"
      # Mount utils folder
      - "./utils:/utils:cached"
      # Exclude Python cache and venv
      - /app/__pycache__
      - /app/venv
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
      # nl-agent:
      #   condition: service_started
      # rag-service:
      #   condition: service_started
      # data-pipeline:
      #   condition: service_started
      # graph-backend:
      #   condition: service_started
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://cse_user:cse_password@postgres:5432/cse_explorer_auth
      - POSTGRES_USER=cse_user
      - POSTGRES_PASSWORD=cse_password
      - POSTGRES_DB=cse_explorer_auth
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      # JWT Configuration
      - JWT_SECRET_KEY=super-secret-jwt-key-change-this-in-production-cse-explorer-2024
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      # Development Configuration
      - DEVELOPMENT_MODE=true
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/utils:$PYTHONPATH
      # Service URLs (internal, behind gateway)
      - NL_AGENT_URL=http://nl-agent:8001
      - RAG_SERVICE_URL=http://rag-service:8002
      - DATA_PIPELINE_URL=http://data-pipeline:8000
      - GRAPH_BACKEND_URL=http://graph-backend:8003
      # Kafka and Redis Configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis:6379
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - API_RELOAD=false
    networks:
      - cse-explorer-network

  # Frontend development server
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile.dev
    container_name: cse-explorer-frontend
    ports:
      - "5173:5173"
    volumes:
      - "./Frontend:/app"
      - frontend_node_modules:/app/node_modules
    environment:
      # API Gateway Configuration (for Vite proxy target only, not used in browser)
      - VITE_API_BASE_URL=http://api-gateway:8080
      # Neo4j Configuration (proxy target and credentials)
      - VITE_NEO4J_PROXY_TARGET=http://graph-db:7474
      - VITE_NEO4J_USER=neo4j
      - VITE_NEO4J_PASSWORD=password
      # Dev Server Configuration
      - VITE_DEV_SERVER_PORT=5173
      # Cypress Test Configuration
      - VITE_CYPRESS_BASE_URL=http://localhost:5173
    depends_on:
      api-gateway:
        condition: service_started
      graph-db:
        condition: service_healthy
    networks:
      - cse-explorer-network


volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  frontend_node_modules:

networks:
  cse-explorer-network:
    driver: bridge
